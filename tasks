#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>
#include <stdbool.h>
#include <time.h>

int width = 7;
int height = 7;
int gameover;
int score;
int x, y, fruitX, fruitY;
int tailX[100], tailY[100];
int nTail;
enum eDirecton { STOP = 0, LEFT, RIGHT, UP, DOWN };
enum eDirecton dir;

int getRandom(int min, int max)
{
    return rand() % (max - min + 1) + min;
}

void setup()
{
    gameover = 0;
    dir = STOP;

    // Initialize the snake's position in the middle of the grid.
    x = height / 2;
    y = width / 2;

    // Initialize the score and tail length.
    score = 0;
    nTail = 0;

    srand(time(NULL)); // Seed for randomization
    fruitX = getRandom(1, width - 2);
    fruitY = getRandom(1, height - 2);
}

void draw()
{
    system("cls");

    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1)
                printf("#");
            else
            {
                if (i == x && j == y)
                    printf("O");
                else if (i == fruitX && j == fruitY)
                    printf("F");
                else
                {
                    bool printTail = false;
                    for (int k = 0; k < nTail; k++)
                    {
                        if (tailX[k] == i && tailY[k] == j)
                        {
                            printf("o");
                            printTail = true;
                        }
                    }
                    if (!printTail)
                        printf(" ");
                }
            }
        }
        printf("\n");
    }

    printf("Score: %d\n", score);
}

void input()
{
    if (_kbhit())
    {
        switch (_getch())
        {
        case 'a':
            dir = LEFT;
            break;
        case 'd':
            dir = RIGHT;
            break;
        case 'w':
            dir = UP;
            break;
        case 's':
            dir = DOWN;
            break;
        case 'x':
            gameover = 1;
            break;
        }
    }
}

void logic()
{
    Sleep(200); // Adjust the snake's speed here

    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;

    for (int i = 1; i < nTail; i++)
    {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }

    switch (dir)
    {
    case LEFT:
        y--;
        break;
    case RIGHT:
        y++;
        break;
    case UP:
        x--;
        break;
    case DOWN:
        x++;
        break;
    default:
        break;
    }

    // Check if the snake hits the boundary
    if (x >= height || x < 0 || y >= width || y < 0)
        gameover = 1;

    // Check if the snake eats the fruit
    if (x == fruitX && y == fruitY)
    {
        score += 10;
generateFruit:
        fruitX = getRandom(1, width - 2);
        fruitY = getRandom(1, height - 2);
        nTail++;
    }

    // Check if the snake hits itself
    for (int i = 0; i < nTail; i++)
    {
        if (tailX[i] == x && tailY[i] == y)
            gameover = 1;
    }
}

int main()
{
    setup();

    while (!gameover)
    {
        draw();
        input();
        logic();
    }

    printf("Game Over! Your Score: %d\n", score);

    return 0;
}
